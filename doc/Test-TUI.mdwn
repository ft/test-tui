# NAME

Test::TUI - Framework for testing full-screen terminal applications

# SYNOPSIS

~~~~~~~ {.Perl}
use Test::TUI;

testtuiset { trace => 1,
             debug => 1 };

application_under_test "aumix";

test_script [
    { title => q{aumix started up normally},
      until => { string => "aumix",
                 line => 1,
                 lendgth => 5 } },
    "+++",
    { wait => 250 },
    "---",
    { wait => 250 },
    "q"
    { programexit => 0 } ];

run_test_script;
~~~~~~~


# DESCRIPTION

The *Test::TUI* module is a framework for user-interface testing of full-screen
terminal applications (i.e. curses or s-lang applications). While being a Perl
module and thus offering the full power of the Perl language and ecosystem,
Test::TUI implements a simple domain specific language to describe how an
application under test should behave.

The way this works is fairly straight forward: First a pseudo-terminal is
created for the application-under-test to be connected to (that feature is
provided by the *IO::Pty::Easy* module). Then the execution environment is
setup such that the terminal the application is running under is a \`**vt102**'
of a certain size (the size defaults to 24 lines by 80 columns, but may be
changed via configuration).

Then the application is actually run and the framework steps through a
user-defined script, that defines what data is fed into the program and what
the expected reaction of the application should be. The framework always keeps
reading from the application-under-test to keep a very consistent state of its
idea of what the terminal would actually display. The workhorse that keeps that
idea of the contents of the terminal accurate and updated is provided by the
\`*Term::VT102*' module.

Scripts using *Test::TUI* produce output, that adheres to the Test Anything
Protocol (TAP) and can therefore be consumed by Perl's TAP harnesses, such as
\`*prove(1)*'.


# CONFIGURATION

Test::TUI can be configured by using the \`*testtuiset*' function described in
**API** below. This section discusses the parameters, that \`*testtuiset*'
offers to manipulate.

`trace`

:   If enabled, Test::TUI prints a trace of characters it sends to the
    application under test, as well as the actions it takes and the tests
    it performs. (default: **off**)

`debug`

:   If enabled, Test::TUI will emit lots of debugging information. (default:
    **off**)

`dump`

:   If enabled, Test::TUI dumps the contents of its terminal buffer after each
    implicit or explicit \`*wait*'. (default: **off**)

`exit_timeout`

:   Defines the default for the \`*programexit*' calls. (default: *5000*)

`expect_wait`

:   Defines the default \`*wait*' period before \`*expect*' calls. (default:
    **200**)

`write_wait`

:   Defines the default \`*wait*' period, that is initiated between two
    consecutive writes in the test-script without any other action in between.

`until_timeout`

:   Defines the default timeout for \`*until*' calls. (default **1000**)

`until_fraction`

:   Defines the period of time \`*until*' calls wait as least before rechecking
    the condition it was passed. (default: **100**)

`write_timeout`

:   Defines the timeout while writing the the application under test.
    This timeout should never be hit, because the pty the application is
    connected to should buffer a good amount of characters. If the default
    timeout is hit, the application likely doesn't read its input anymore and
    the pty's buffer is full. (default: **500**)

`read_timeout`

:   Defines the timeout for reading data from the application under test.
    Contrary to \`*write_timeout*', this timeout is commonly hit and defines
    the maximum granularity of \`*wait*' periods. A higher value results in
    less granularity and less CPU time, whereas a lower values translates to
    higher granularity and more CPU time. (default: **5**)

`terminal_lines`

:   Defines the number of lines in the emulated terminal. (default: **24**)

`terminal_columns`

:   Defines the number of columns in the emulated terminal. (default: **80**)


# API

Test::TUI's API defines its domain-specific language for describing the desired
execution of the application under test.

`application_under_test`\ **PROGRAM-WITH-ARGUMENTS**

:   Define the command-line of the program that should be tested. It is an
    array of a command name with all the required arguments to the command.
    This command is **not** passed through a shell.

`test_script`\ **SCRIPT-LISTING**

:   This defines the way the framework interacts with the program. See
    **Script Listing** below for details. The **SCRIPT-LISTING** is supplied
    as an array-ref.

`run_test_script`

:   Runs the application and applies the supplied test-script. This function
    never returns. It will always call \`*exit*' with one of the exit codes
    listed in **EXIT CODES** below.

`testtuiset`\ **KEY-VALUE-PAIRS**

:   This takes a set of key-value pairs as a hash-ref and sets the according
    parameters. See **CONFIGURATION** above for available parameters.


# SCRIPT LISTING

A script listing (that is used as a test-script by the framework) is a sequence
of steps, that either tell what data is send to the application-under-test or
describe a condition, which test if the application exhibited an expected
reaction. Such a listing is handed over to the framework as an array-reference
to the \`**test_script**' API call.

There are two different types of entries in a script listing (actually three,
but the third one gets reduced to one of the other two): *strings* and
*hash-references*.

When a string is encountered, its characters are send to the
application-under-test. Hash-references on the other hand signal some sort of
advanced action (such as a tests, wait instructions and the like).

The third item that may be part of the script is a *code-reference*. When it is
encountered during the processing of the script, the code is executed and its
return value is used in place of the code reference. Hence, such a
code-reference may return either a string or a hash-reference and therefore
does not introduce any additional rules to the ones described above.

A complete and extensively commented example of a *Test::TUI* script can be
found in the \``example-script`' file of the module's distribution.

It is important to note, that **every** test script **has** to start with a
`plan` directive (see below for details).


## Hash-References

String entries in script listings are trivial. Code-references in script
listings either return a string or a hash-reference. Thus, the one thing we
need to described in further detail are hash-reference type entries.

As it is with hashes, they may contain arbitrary key/value pairs. Obviously,
only a number of keys are recognised by Test::TUI and only a subset of those
decide what type of action a hash-ref entry in a test-script represents. Those
type-defining keys are listed below. Note that these defining keys may not be
mixed with each other, unless otherwise noted. Mixing them without such an
exception, results in undefined behaviour.

`until`

:   Checks a contition periodically until a timeout is reached or the condition
    returns a true value. Among other things, \`*until*' expressions are useful
    to make sure an application booted entirely by checking for a characteristic
    part of its user interface being present.

`expect`

:   This checks a condition once and expects it to be true. Failing conditions
    in \`*expect*' expressions cause the entire test to fail.

`plan`

:   The first entry in a test script has to be an entry that describes how
    many tests you are planning to run. This is information for the TAP harness
    so it can tell whether or not tests where skipped or not. Valid values for
    this are either the string "noplan" or positive non-zero integer.

`programexit`

:   Causes the script to wait for the application to exit and compare the
    actual return value to the one specified in the expression. The timeout
    for the exit to happen is defined by the *exit_timeout* setting. If the
    timeout is reached, the condition fails.

`wait`

:   Causes the execution to wait for defined period of time. As an exception,
    \`*wait*' expressions may be combined with \`*expect*' expressions to define
    a custom wait-period before \`*expect*' checks its condition.


The `expect`, `programexit` and `until` expressions define actual tests. Each
of these expressions will cause a line of output in the script's TAP output,
that looks roughly like this:

    ok 23 - descriptive text here

The *"descriptive text"* part is configurable by adding a `title` key to the
expression in question. See the short code in the *SYNOPSIS* section for an
example.


### \`expect'-Expressions

\`*expect*' is used to check for conditions with the application under test
when the \`*expect*' expression is encountered. Before checking the condition
attached to it, \`*expect*' issues a delay, which defaults to the
\`**expect_wait**' configuration parameter. This period may be changed for
individual expects by supplying a \`*wait*' key in the same hash-ref (the value
should be an integer, which defines the waiting period in milliseconds).

~~~~~~~ {.Perl}
{ expect => CONDITION }
~~~~~~~

~~~~~~~ {.Perl}
{ expect => CONDITION,
  wait => DURATION }
~~~~~~~

If the condition is **not** met, the script will bail out signaling a failed
test to its calling process.

\`*expect*' is most useful if you created a defined situation and want to check
whether the program was behaving apropriately. If you need to wait for
something to happen for longer periods of time, \`*until*' - which is described
below - is probably the more natural fit.


### \`plan'-Expressions

Plan is an expression that is **required** in every test script. In fact, it
**has** to be the very first entry in every test script. It denotes the number
of tests you indent to run in a script. This makes sure that no script may be
skipped accidentally. The number or tests is part of the plan line, which is
printed at the beginning of the test script.

~~~~~~~ {.Perl}
{ plan => NUMBER-OF-TESTS }
~~~~~~~

In case the number of tests in a script is unknown (maybe the script is
generated by other means) you may specify the "noplan" string instead of the
number of tests.

~~~~~~~ {.Perl}
{ plan => "noplan" }
~~~~~~~

In the case of *"noplan"* the plan line is printed at the end of the test
script, not at the start of it.


### \`programexit'-Expressions

It is usually a good idea to cause the application-under-test to gracefully
exit at the end of a test-script. The `*programexit*' directive enables you to
wait for the program to exit and to inspect the exit code the program yielded.

~~~~~~~ {.Perl}
{ programexit => EXPECTED-EXIT-CODE }
~~~~~~~

The common exit code to reflect successful termination would be \`*0*'.

\`*programexit*' waits at most \`*exit_timeout*' milliseconds until it times
out and thus fails the condition. Unlike \`*until*', this directive does not
allow the user to locally specify a timeout that differs from the global value,
because this directive only makes sense once (at the very end) of a test
script.


### \`until'-Expressions

To repetitively check for a condition until either the condition turns out to
be met or a timeout is reached, the \`*until*' expression was introduced.

~~~~~~~ {.Perl}
{ until => CONDITION }
~~~~~~~

~~~~~~~ {.Perl}
{ until => CONDITION,
  timeout => DURATION }
~~~~~~~

A common use-case for \`*until*' is the beginning of a test-script, where you
might want to make sure that the application-under-test was fully loaded,
before the actual tests get evaluated.

The supplied condition may fail multiple times, but has to be met before the
expression's timeout is reached (which defaults to \`*until_timeout*' but may
be modified for any given \`*until*' expression by supplying a \`*timeout*'
key/valuepair in the expression's hash-ref). If the timeout is reached that
will cause the test-script to fail. The appropriate exit-code will be signaled
to the calling process.


### \`wait'-Expressions

The \`*wait*' expression causes the script-execution to be paused for
**DURATION** milliseconds.

~~~~~~~ {.Perl}
{ wait => DURATION }
~~~~~~~

This expression ignores all other hash keys (unless it is used in connection
with \`*expect*', in which case the wait key is actually just a parameter for
expect).


# CONDITIONS

Conditions describe certain traits of the application-under-test's user
interface. There are a number of built-in conditions, which are all expressed
as hash-references. Custom conditions may be implemented in arbitrary Perl
code, which needs to be handed over as a code reference or anonymous function
(which actually is a code-ref as well). The \``example-script`' shows the use
of built-in as well as custom conditions.

The built-in conditions are described in the remainder of this section.


## \`string'

This condition does **exact** string matches, like Perl's \`eq' operator would.
The general condition looks like this:

~~~~~~~ {.Perl}
{ string => EXPECTED-STRING,
  line => LINE-TO-CHECK,
  column => COLUMN-TO-START-IN,
  length => LENGTH-OF-STRING }
~~~~~~~

Here, \`line', \`column' and \`length' define what part of the applcation's
user-inface to compare to the string in \`string'. Instead of \`length', you
may provide an \`end' parameter, which would define the column it which the
string should end.

The condition is met, if the input string matches the extracted string from the
user interface.


## \`regexp'

Like anywhere else in Perl, there is also a built-in condition that uses Perl's
regular expression as a testing-tool. The definition looks similar to the
\`*string*' condition:

~~~~~~~ {.Perl}
{ regexp => REGULAR-EXPRESSION,
  line => LINE-TO-CHECK,
  column => COLUMN-TO-START-IN,
  length => LENGTH-OF-STRING }
~~~~~~~

\`line', \`column', \`length' and \`end' behave exactly like they do with
\`*string*'. They define a portion of the user interface that forms a string,
which is then matched against the regular expression provided in \`regexp'.

The condition is met, if the regular expression matches the string.


# EXIT CODES

After \`*run_test_script*', Test::TUI will exit with one of the exit codes
listed here:

`0`
:   all good

`1`
:   test failed

`2`
:   until condition wasn't met

`10`
:   unexpected EOF while reading from child

`11`
:   write timeout

`12`
:   write failed

`23`
:   application-under-test died unexpectedly

`42`
:   something unexpected/disallowed found in test-script


# SEE ALSO

*IO::Pty::Easy*, *Term::VT102*, *prove(1)*

*http://testanything.org*


# AUTHOR

Frank Terbeck <ft@bewatermyfriend.org>


# COPYRIGHT AND LICENCE

Copyright (c) 2012-2013 Frank Terbeck <ft@bewatermyfriend.org>, All
rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

  1. Redistributions of source code must retain the above
     copyright notice, this list of conditions and the following
     disclaimer.
  2. Redistributions in binary form must reproduce the above
     copyright notice, this list of conditions and the following
     disclaimer in the documentation and/or other materials
     provided with the distribution.

 THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
 WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS OF THE
 PROJECT BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
